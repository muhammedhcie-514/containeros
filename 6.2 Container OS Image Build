Step 1 Install KubeOS.
Run the following commands on the k8smaster1 node:
[root@k8smaster1 ~]# sudo yum install golang make git rust cargo openssl-devel
[root@k8smaster1 ~]# cat << EOF >> ~/.cargo/config
[source.crates-io]
replace-with='rsproxy'
[source.rsproxy]
registry="https://rsproxy.cn/crates.io-index"
[registries.rsproxy]
index = "https://rsproxy.cn/crates.io-index"
[net]
git-fetch-with-cli = true
EOF
[root@k8smaster1 ~]# sudo git clone https://gitee.com/openeuler/KubeOS.git
[root@k8smaster1 ~]# cd KubeOS
[root@k8smaster1 KubeOS]# sudo make
Step 2 Modify the image configuration file.
Go to the scripts directory.
[root@k8smaster1 KubeOS]# cd /root/KubeOS/scripts

If the node is a Huawei Cloud ECS, modify the /root/KubeOS/scripts/grub.cfg
configuration file in /dev/vda2 and /dev/vda3.
### BEGIN /etc/grub.d/10_linux ###
menuentry 'A' --class KubeOS --class gnu-linux --class gnu --class os --unrestricted
$menuentry_id_option 'KubeOS-A' {
 load_video
 set gfxpayload=keep
 insmod gzio
 insmod part_msdos
 insmod ext2
 set root='hd0,msdos2'
 if [ x$feature_platform_search_hint = xy ]; then
 search --no-floppy --file --set=root --hint-bios=hd0,msdos2 --hint-efi=hd0,msdos2 --hintbaremetal=ahci0,msdos2 /vmlinuz
 else
 search --no-floppy --file --set=root /vmlinuz
 fi
 linux /vmlinuz root=/dev/vda2 ro rootfstype=ext4 nomodeset quiet oops=panic
softlockup_panic=1 nmi_watchdog=1 rd.shell=0 selinux=0 crashkernel=256M panic=3
 initrd /initramfs.img
}
menuentry 'B' --class KubeOS --class gnu-linux --class gnu --class os --unrestricted
$menuentry_id_option 'KubeOS-B' {
 load_video
 set gfxpayload=keep
 insmod gzio
 insmod part_msdos
 insmod ext2
 set root='hd0,msdos3'
 if [ x$feature_platform_search_hint = xy ]; then
 search --no-floppy --file --set=root --hint-bios=hd0,msdos3 --hint-efi=hd0,msdos3 --hintbaremetal=ahci0,msdos3 /vmlinuz
 else
 search --no-floppy --file --set=root /vmlinuz
 fi
 linux /vmlinuz root=/dev/vda3 ro rootfstype=ext4 nomodeset quiet oops=panic
softlockup_panic=1 nmi_watchdog=1 rd.shell=0 selinux=0 crashkernel=256M panic=3
 initrd /initramfs.img
}
### END /etc/grub.d/10_linux ###

Step 3 Modify the configuration file of extensions.
Open the image extension configuration file /root/KubeOS/scripts/rpmlist, modify the
kubeadm and kubelet versions, and add openssh-clients. If other software tools are
required, add them to the configuration file. No more software tools will be installed on
the nodes in subsequent operations.



Step 4 Install dependencies.
[root@k8smaster1 scripts]# yum install -y qemu-img bc parted
Step 5 Create a base container OS.
In the scripts directory, create a Yum repository file oe2203lts.repo for the OS to be
upgraded.
[OS]
name=OS
baseurl=http://repo.openeuler.org/openEuler-22.03-LTS/OS/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://repo.openeuler.org/openEuler-22.03-LTS/OS/$basearch/RPM-GPG-KEY-openEuler
[everything]
name=everything
baseurl=http://repo.openeuler.org/openEuler-22.03-LTS/everything/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://repo.openeuler.org/openEuler-22.03-LTS/everything/$basearch/RPM-GPG-KEYopenEuler
[EPOL]
name=EPOL
baseurl=http://repo.openeuler.org/openEuler-22.03-LTS/EPOL/main/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://repo.openeuler.org/openEuler-22.03-LTS/OS/$basearch/RPM-GPG-KEY-openEuler
[kubernetes]
name=Kubernetes
baseurl=https://repo.huaweicloud.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=https://repo.huaweicloud.com/kubernetes/yum/doc/yum-key.gpg
https://repo.huaweicloud.com/kubernetes/yum/doc/rpm-package-key.gpg

Create a base container OS. The .repo file is the Yum repository of openEuler 22.03 LTS,
and $1$xyz$RdLyKTL32WEvK3lg8CXID0 is encrypted from the password 
(openEuler12#$) of the root user. You can also use the custom password generated by
OpenSSL.



[root@k8smaster1 scripts]# bash kbimg.sh create vm-image -p oe2203lts.repo -v v1 -b ../bin/os-agent
-e '''$1$xyz$RdLyKTL32WEvK3lg8CXID0'''

The system.img, system.qcow2, and update.img files are generated.

Download system.qcow2 to the local PC and change its name to oe2203lts.qcow2.
After the download is complete, delete the three OS image files.
[root@k8smaster1 scripts]# rm -rf system.img
[root@k8smaster1 scripts]# rm -rf system.qcow2
[root@k8smaster1 scripts]# rm -rf update.img

Step 6 (Optional) Upload the base container OS.
If the Kubernetes cluster uses Huawei Cloud ECSs, use oe2203lts.qcow to create a
private image.
1. Log in to Huawei Cloud Object Storage Service (OBS), create a standard bucket, and
upload oe2203lts.qcow2 to the bucket.
2. Log in to Huawei Cloud Image Management Service (IMS) and create a private image.
Set Type to Import Image, select the oe2203lts.qcow2 file in the bucket, set System
Disk (GiB) to 20, and enter a custom image name.

Step 7 Create a container OS for upgrade.
In the scripts directory, create a Yum repository file oe2203sp2.repo for upgrade.
[openEuler]
name=openEuler
baseurl=http://repo.openeuler.org/openEuler-22.03-LTS-SP2/everything/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://repo.openeuler.org/openEuler-22.03-LTS-SP2/everything/$basearch/RPM-GPG-KEYopenEuler
[Epol]
name=Epol
baseurl=http://repo.openeuler.org/openEuler-22.03-LTS-SP2/EPOL/main/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://repo.openeuler.org/openEuler-22.03-LTS-SP2/OS/$basearch/RPM-GPG-KEY-openEuler
[kubernetes]
name=Kubernetes
baseurl=https://repo.huaweicloud.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=https://repo.huaweicloud.com/kubernetes/yum/doc/yum-key.gpg
https://repo.huaweicloud.com/kubernetes/yum/doc/rpm-package-key.gpg




Create a container OS for upgrade.
[root@k8smaster1 scripts]# bash kbimg.sh create vm-image -p oe2203sp2.repo -v v2 -b ../bin/osagent -e '''$1$xyz$RdLyKTL32WEvK3lg8CXID0'''
The system.img, system.qcow2, and update.img files are generated.




